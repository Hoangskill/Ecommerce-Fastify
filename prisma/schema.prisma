generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  roles       UserRole[]
  orders      Order[]
  cartItems   CartItem[]
  tokens      RefreshToken[]
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  createdAt   DateTime     @default(now())

  userRoles   UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String       @id @default(uuid())
  name        String       @unique
  createdAt   DateTime     @default(now())

  roles       RolePermission[]
}

model UserRole {
  id        String  @id @default(uuid())
  userId    String
  roleId    String

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model RolePermission {
  id           String  @id @default(uuid())
  roleId       String
  permissionId String

  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Product {
  id          String    @id @default(uuid())
  name        String
  price       Float
  stock       Int
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  category    Category  @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  createdAt   DateTime  @default(now())

  products    Product[]
}

model Order {
  id          String    @id @default(uuid())
  userId      String
  total       Float
  status      String    @default("PENDING")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id          String  @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  price       Float

  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id          String  @id @default(uuid())
  userId      String
  productId   String
  quantity    Int
  createdAt   DateTime @default(now())

  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model RefreshToken {
  id          String   @id @default(uuid())
  userId      String
  token       String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


//Làm theo chuẩn RBAC (Role-Based Access Control)
//Mỗi user có thể có nhiều role
//Mỗi role có thể có nhiều permission
//Mỗi user có thể có nhiều token
//Mỗi user có thể có nhiều order
//Mỗi order có thể có nhiều orderItem
//Mỗi orderItem có thể có nhiều product
//Mỗi user có thể có nhiều cartItem
//Mỗi cartItem có thể có nhiều product
//Mỗi product có thể có nhiều cartItem
//Mỗi product có thể có nhiều orderItem